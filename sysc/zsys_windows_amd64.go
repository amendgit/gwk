// mksyscall_windows.pl -l32 sys_windows.go sys_windows_amd64.go
// MACHINE GENERATED BY THE COMMAND ABOVE; DO NOT EDIT

package sysc

import "unsafe"
import "syscall"

var (
	moduser32 = syscall.NewLazyDLL("user32.dll")
	modgdi32 = syscall.NewLazyDLL("gdi32.dll")

	procCreateWindowExW = moduser32.NewProc("CreateWindowExW")
	procRegisterClassExW = moduser32.NewProc("RegisterClassExW")
	procShowWindow = moduser32.NewProc("ShowWindow")
	procUpdateWindow = moduser32.NewProc("UpdateWindow")
	procLoadIconW = moduser32.NewProc("LoadIconW")
	procLoadCursorW = moduser32.NewProc("LoadCursorW")
	procGetMessageW = moduser32.NewProc("GetMessageW")
	procPeekMessageW = moduser32.NewProc("PeekMessageW")
	procPostMessageW = moduser32.NewProc("PostMessageW")
	procTranslateMessage = moduser32.NewProc("TranslateMessage")
	procDispatchMessageW = moduser32.NewProc("DispatchMessageW")
	procGetClientRect = moduser32.NewProc("GetClientRect")
	procGetWindowRect = moduser32.NewProc("GetWindowRect")
	procGetDC = moduser32.NewProc("GetDC")
	procBeginPaint = moduser32.NewProc("BeginPaint")
	procEndPaint = moduser32.NewProc("EndPaint")
	procDrawTextExW = moduser32.NewProc("DrawTextExW")
	procPostQuitMessage = moduser32.NewProc("PostQuitMessage")
	procDefWindowProcW = moduser32.NewProc("DefWindowProcW")
	procGetUpdateRect = moduser32.NewProc("GetUpdateRect")
	procRedrawWindow = moduser32.NewProc("RedrawWindow")
	procInvalidateRect = moduser32.NewProc("InvalidateRect")
	procMsgWaitForMultipleObjectsEx = moduser32.NewProc("MsgWaitForMultipleObjectsEx")
	procSetTimer = moduser32.NewProc("SetTimer")
	procGetQueueStatus = moduser32.NewProc("GetQueueStatus")
	procWaitMessage = moduser32.NewProc("WaitMessage")
	procBitBlt = modgdi32.NewProc("BitBlt")
	procSetDIBitsToDevice = modgdi32.NewProc("SetDIBitsToDevice")
	procDeleteDC = modgdi32.NewProc("DeleteDC")
	procCreateCompatibleDC = modgdi32.NewProc("CreateCompatibleDC")
	procSelectObject = modgdi32.NewProc("SelectObject")
	procDeleteObject = modgdi32.NewProc("DeleteObject")
	procGdiAplhaBlend = modgdi32.NewProc("GdiAplhaBlend")
	procCreateDIBSection = modgdi32.NewProc("CreateDIBSection")
	procGetWindowLongPtrW = moduser32.NewProc("GetWindowLongPtrW")
	procSetWindowLongPtrW = moduser32.NewProc("SetWindowLongPtrW")

)

func CreateWindowEx(exStyle uint32, className *uint16, windowName *uint16, style uint32, x int, y int, width int, height int, wndParent Handle, menu Handle, instance Handle, param uintptr) (hwnd Handle, err error) {
	r0, _, e1 := syscall.Syscall12(procCreateWindowExW.Addr(), 12, uintptr(exStyle), uintptr(unsafe.Pointer(className)), uintptr(unsafe.Pointer(windowName)), uintptr(style), uintptr(x), uintptr(y), uintptr(width), uintptr(height), uintptr(wndParent), uintptr(menu), uintptr(instance), uintptr(param))
	hwnd = Handle(r0)
	if hwnd == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func RegisterClassEx(wcx *WNDCLASSEX) (atom uint16, err error) {
	r0, _, e1 := syscall.Syscall(procRegisterClassExW.Addr(), 1, uintptr(unsafe.Pointer(wcx)), 0, 0)
	atom = uint16(r0)
	if atom == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func ShowWindow(hwnd Handle, cmdShow int32) (visiable int) {
	r0, _, _ := syscall.Syscall(procShowWindow.Addr(), 2, uintptr(hwnd), uintptr(cmdShow), 0)
	visiable = int(r0)
	return
}

func UpdateWindow(hwnd Handle) (isUpdated int) {
	r0, _, _ := syscall.Syscall(procUpdateWindow.Addr(), 1, uintptr(hwnd), 0, 0)
	isUpdated = int(r0)
	return
}

func LoadIcon(instance Handle, iconName *uint16) (hicon Handle, err error) {
	r0, _, e1 := syscall.Syscall(procLoadIconW.Addr(), 2, uintptr(instance), uintptr(unsafe.Pointer(iconName)), 0)
	hicon = Handle(r0)
	if hicon == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func LoadCursor(instance Handle, cursorName *uint16) (hcursor Handle, err error) {
	r0, _, e1 := syscall.Syscall(procLoadCursorW.Addr(), 2, uintptr(instance), uintptr(unsafe.Pointer(cursorName)), 0)
	hcursor = Handle(r0)
	if hcursor == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func GetMessage(msg *MSG, hwnd Handle, msgFilterMin uint32, msgFilterMax uint32) (EOL int) {
	r0, _, _ := syscall.Syscall6(procGetMessageW.Addr(), 4, uintptr(unsafe.Pointer(msg)), uintptr(hwnd), uintptr(msgFilterMin), uintptr(msgFilterMax), 0, 0)
	EOL = int(r0)
	return
}

func PeekMessage(msg *MSG, hwnd Handle, msgFilterMin uint32, msgFilterMax uint32, removeMsg uint32) (has_msg bool) {
	r0, _, _ := syscall.Syscall6(procPeekMessageW.Addr(), 5, uintptr(unsafe.Pointer(msg)), uintptr(hwnd), uintptr(msgFilterMin), uintptr(msgFilterMax), uintptr(removeMsg), 0)
	has_msg = bool(r0 != 0)
	return
}

func PostMessage(hwnd Handle, Msg uint32, lParam uintptr, wParam uintptr) (succeed bool) {
	r0, _, _ := syscall.Syscall6(procPostMessageW.Addr(), 4, uintptr(hwnd), uintptr(Msg), uintptr(lParam), uintptr(wParam), 0, 0)
	succeed = bool(r0 != 0)
	return
}

func TranslateMessage(msg *MSG) (isTranslated int) {
	r0, _, _ := syscall.Syscall(procTranslateMessage.Addr(), 1, uintptr(unsafe.Pointer(msg)), 0, 0)
	isTranslated = int(r0)
	return
}

func DispatchMessage(msg *MSG) (ingore int) {
	r0, _, _ := syscall.Syscall(procDispatchMessageW.Addr(), 1, uintptr(unsafe.Pointer(msg)), 0, 0)
	ingore = int(r0)
	return
}

func GetClientRect(hwnd Handle, rect *RECT) (err error) {
	r1, _, e1 := syscall.Syscall(procGetClientRect.Addr(), 2, uintptr(hwnd), uintptr(unsafe.Pointer(rect)), 0)
	if r1 == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func GetWindowRect(hwnd Handle, rect *RECT) (err error) {
	r1, _, e1 := syscall.Syscall(procGetWindowRect.Addr(), 2, uintptr(hwnd), uintptr(unsafe.Pointer(rect)), 0)
	if r1 == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func GetDC(hwnd Handle) (hDC Handle, err error) {
	r0, _, e1 := syscall.Syscall(procGetDC.Addr(), 1, uintptr(hwnd), 0, 0)
	hDC = Handle(r0)
	if hDC == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func BeginPaint(hwnd Handle, ps *PAINTSTRUCT) (hDC Handle) {
	r0, _, _ := syscall.Syscall(procBeginPaint.Addr(), 2, uintptr(hwnd), uintptr(unsafe.Pointer(ps)), 0)
	hDC = Handle(r0)
	return
}

func EndPaint(hwnd Handle, ps *PAINTSTRUCT) (err error) {
	r1, _, e1 := syscall.Syscall(procEndPaint.Addr(), 2, uintptr(hwnd), uintptr(unsafe.Pointer(ps)), 0)
	if r1 == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func DrawTextEx(hDC Handle, text *uint16, length int32, rc *RECT, format uint32, params *DRAWTEXTPARAMS) (retval int32) {
	r0, _, _ := syscall.Syscall6(procDrawTextExW.Addr(), 6, uintptr(hDC), uintptr(unsafe.Pointer(text)), uintptr(length), uintptr(unsafe.Pointer(rc)), uintptr(format), uintptr(unsafe.Pointer(params)))
	retval = int32(r0)
	return
}

func PostQuitMessage(exitcode int32) {
	syscall.Syscall(procPostQuitMessage.Addr(), 1, uintptr(exitcode), 0, 0)
	return
}

func DefWindowProc(hwnd Handle, msg uint32, warg uintptr, larg uintptr) (retval uintptr) {
	r0, _, _ := syscall.Syscall6(procDefWindowProcW.Addr(), 4, uintptr(hwnd), uintptr(msg), uintptr(warg), uintptr(larg), 0, 0)
	retval = uintptr(r0)
	return
}

func GetUpdateRect(hwnd Handle, rect *RECT, erase int32) (isempty int32) {
	r0, _, _ := syscall.Syscall(procGetUpdateRect.Addr(), 3, uintptr(hwnd), uintptr(unsafe.Pointer(rect)), uintptr(erase))
	isempty = int32(r0)
	return
}

func RedrawWindow(hwnd Handle, rect *RECT, hrgn Handle, flags uint32) {
	syscall.Syscall6(procRedrawWindow.Addr(), 4, uintptr(hwnd), uintptr(unsafe.Pointer(rect)), uintptr(hrgn), uintptr(flags), 0, 0)
	return
}

func InvalidateRect(hwnd Handle, rect *RECT, isErased int) (ok int) {
	r0, _, _ := syscall.Syscall(procInvalidateRect.Addr(), 3, uintptr(hwnd), uintptr(unsafe.Pointer(rect)), uintptr(isErased))
	ok = int(r0)
	return
}

func MsgWaitForMultipleObjectsEx(nCount uint32, lpHandles *Handle, bWaitAll int32, dwMilliseconds uint32, bAlertable int32) (event uint32) {
	r0, _, _ := syscall.Syscall6(procMsgWaitForMultipleObjectsEx.Addr(), 5, uintptr(nCount), uintptr(unsafe.Pointer(lpHandles)), uintptr(bWaitAll), uintptr(dwMilliseconds), uintptr(bAlertable), 0)
	event = uint32(r0)
	return
}

func SetTimer(hWnd Handle, nIDEvent uintptr, uElapse uint, lpTimerFunc uintptr) (rIDEvent uintptr) {
	r0, _, _ := syscall.Syscall6(procSetTimer.Addr(), 4, uintptr(hWnd), uintptr(nIDEvent), uintptr(uElapse), uintptr(lpTimerFunc), 0, 0)
	rIDEvent = uintptr(r0)
	return
}

func GetQueueStatus(flags uint) (hilow uint32) {
	r0, _, _ := syscall.Syscall(procGetQueueStatus.Addr(), 1, uintptr(flags), 0, 0)
	hilow = uint32(r0)
	return
}

func WaitMessage() (succeed int32) {
	r0, _, _ := syscall.Syscall(procWaitMessage.Addr(), 0, 0, 0, 0)
	succeed = int32(r0)
	return
}

func BitBlt(hDC Handle, xDext int32, yDext int32, width int32, height int32, hDCSrc Handle, xSrc int32, ySrc int32, rop uint32) (err error) {
	r1, _, e1 := syscall.Syscall9(procBitBlt.Addr(), 9, uintptr(hDC), uintptr(xDext), uintptr(yDext), uintptr(width), uintptr(height), uintptr(hDCSrc), uintptr(xSrc), uintptr(ySrc), uintptr(rop))
	if r1 == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func SetDIBitsToDevice(hDC Handle, xDext int32, yDest int32, width int32, height int32, xSrc int32, ySrc int32, startScan uint32, scanLines uint32, bits uintptr, bmi *BITMAPINFO, colorUse uint32) (lines int32) {
	r0, _, _ := syscall.Syscall12(procSetDIBitsToDevice.Addr(), 12, uintptr(hDC), uintptr(xDext), uintptr(yDest), uintptr(width), uintptr(height), uintptr(xSrc), uintptr(ySrc), uintptr(startScan), uintptr(scanLines), uintptr(bits), uintptr(unsafe.Pointer(bmi)), uintptr(colorUse))
	lines = int32(r0)
	return
}

func DeleteDC(hDC Handle) (err error) {
	r1, _, e1 := syscall.Syscall(procDeleteDC.Addr(), 1, uintptr(hDC), 0, 0)
	if r1 == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func CreateCompatibleDC(hdc Handle) (cmptDC Handle, err error) {
	r0, _, e1 := syscall.Syscall(procCreateCompatibleDC.Addr(), 1, uintptr(hdc), 0, 0)
	cmptDC = Handle(r0)
	if cmptDC == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func SelectObject(hDC Handle, hgdiobj Handle) (oldObj Handle) {
	r0, _, _ := syscall.Syscall(procSelectObject.Addr(), 2, uintptr(hDC), uintptr(hgdiobj), 0)
	oldObj = Handle(r0)
	return
}

func DeleteObject(hObject Handle) (isDeleted bool) {
	r0, _, _ := syscall.Syscall(procDeleteObject.Addr(), 1, uintptr(hObject), 0, 0)
	isDeleted = bool(r0 != 0)
	return
}

func gdiAlphaBlend(hdcDest Handle, xoriginDest int32, yoriginDest int32, wDest int32, hDest int32, hdcSrc Handle, xoriginSrc int32, yoriginSrc int32, wSrc int32, hSrc int32, ftn uint32) (err error) {
	r1, _, e1 := syscall.Syscall12(procGdiAplhaBlend.Addr(), 11, uintptr(hdcDest), uintptr(xoriginDest), uintptr(yoriginDest), uintptr(wDest), uintptr(hDest), uintptr(hdcSrc), uintptr(xoriginSrc), uintptr(yoriginSrc), uintptr(wSrc), uintptr(hSrc), uintptr(ftn), 0)
	if r1 == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func CreateDIBSection(hdc Handle, bmi *BITMAPINFOHEADER, iUsage uint, ppvBits *unsafe.Pointer, hSection Handle, offset uint32) (hbitmp Handle, err error) {
	r0, _, e1 := syscall.Syscall6(procCreateDIBSection.Addr(), 6, uintptr(hdc), uintptr(unsafe.Pointer(bmi)), uintptr(iUsage), uintptr(unsafe.Pointer(ppvBits)), uintptr(hSection), uintptr(offset))
	hbitmp = Handle(r0)
	if hbitmp == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func GetWindowLongPtr(hwnd Handle, index int64) (longptr uintptr) {
	r0, _, _ := syscall.Syscall(procGetWindowLongPtrW.Addr(), 3, uintptr(hwnd), uintptr(index), uintptr(index >> 32))
	longptr = uintptr(r0)
	return
}

func SetWindowLongPtr(hwnd Handle, index int64, longptr uintptr) (oldLong uintptr) {
	r0, _, _ := syscall.Syscall6(procSetWindowLongPtrW.Addr(), 4, uintptr(hwnd), uintptr(index), uintptr(index >> 32), uintptr(longptr), 0, 0)
	oldLong = uintptr(r0)
	return
}


